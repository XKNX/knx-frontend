// Tasks to generate entry HTML

import fs from "fs-extra";
import gulp from "gulp";
import path from "path";
import paths from "../paths.cjs";

gulp.task("gen-index-knx-dev", async () => {
  const latestEntrypoint = `${paths.knx_publicPath}/frontend_latest/entrypoint.dev.js`;
  const es5Entrypoint = `${paths.knx_publicPath}/frontend_es5/entrypoint.dev.js`;
  const fileHash = getFileHash("entrypoint.dev.js");

  writeKNXEntrypoint(fileHash, latestEntrypoint, es5Entrypoint);
  writePyModules(fileHash);
});

gulp.task("gen-index-knx-prod", async () => {
  const latestManifest = fs.readJsonSync(path.resolve(paths.knx_output_latest, "manifest.json"));
  const es5Manifest = fs.readJsonSync(path.resolve(paths.knx_output_es5, "manifest.json"));
  const fileHash = getFileHash(latestManifest["entrypoint.js"]);

  writeKNXEntrypoint(fileHash, latestManifest["entrypoint.js"], es5Manifest["entrypoint.js"]);
  writePyModules(fileHash);
});

function getFileHash(entrypointFileName) {
  // Filenames have .dev.<ext> or .<hash>.<ext> from ../rspack.cjs createRspackConfig().output.filename
  return entrypointFileName.split(".").slice(-2)[0];
}

function writeKNXEntrypoint(fileHash, latestEntrypoint, es5Entrypoint) {
  fs.mkdirSync(paths.knx_output_root, { recursive: true });
  // Safari 12 and below does not have a compliant ES2015 implementation of template literals, so we ship ES5
  fs.writeFileSync(
    path.resolve(paths.knx_output_root, `entrypoint.${fileHash}.js`),
    `
function loadES5() {
  var el = document.createElement('script');
  el.src = '${es5Entrypoint}';
  document.body.appendChild(el);
}
if (/.*Version\\/(?:11|12)(?:\\.\\d+)*.*Safari\\//.test(navigator.userAgent)) {
    loadES5();
} else {
  try {
    new Function("import('${latestEntrypoint}')")();
  } catch (err) {
    loadES5();
  }
}
  `,
    { encoding: "utf-8" },
  );
}

function writePyModules(fileHash) {
  fs.writeFileSync(
    path.resolve(paths.knx_output_root, "constants.py"),
    `"""Constants for the KNX Panel. This file is generated by gulp."""

FILE_HASH = "${fileHash}"
`,
    { encoding: "utf-8" },
  );
  fs.copyFileSync(
    path.resolve(paths.src_dir, `__init__.py`),
    path.resolve(paths.knx_output_root, `__init__.py`),
  );
  fs.writeFileSync(path.resolve(paths.knx_output_root, "py.typed"), "");
}
